# Generated by Django 2.0.7 on 2018-07-18 04:01

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import isbn_field.fields
import isbn_field.validators
import parler.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Book',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('isbn', isbn_field.fields.ISBNField(blank=True, help_text='ISBN is a ten or thirteen digit number used to identify books and book-like resources.', max_length=28, null=True, unique=True, validators=[isbn_field.validators.ISBNValidator], verbose_name='ISBN')),
                ('price', models.DecimalField(decimal_places=2, default=0.0, max_digits=9, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('old_price', models.DecimalField(decimal_places=2, default=0.0, max_digits=9, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('discount', models.DecimalField(decimal_places=2, default=0, max_digits=4, max_length=4)),
                ('quantity', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1)])),
                ('publisher', models.CharField(blank=True, default=None, max_length=100, null=True)),
                ('pub_year', models.CharField(blank=True, default=None, max_length=4, null=True)),
                ('bestseller', models.BooleanField(default=False)),
                ('available', models.BooleanField(default=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'books',
                'ordering': ['-created'],
            },
            bases=(parler.models.TranslatableModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='BookImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(blank=True, default=None, null=True, unique=True, upload_to='img/books/%Y/%m/%d')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('book', models.OneToOneField(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='bookstore.Book')),
            ],
            options={
                'verbose_name': 'Book Image',
                'verbose_name_plural': 'Book Images',
                'db_table': 'images',
            },
        ),
        migrations.CreateModel(
            name='BookTranslation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('language_code', models.CharField(db_index=True, max_length=15, verbose_name='Language')),
                ('title', models.CharField(db_index=True, max_length=200)),
                ('slug', models.SlugField(max_length=200, unique=True)),
                ('author', models.CharField(blank=True, db_index=True, default=None, max_length=100, null=True)),
                ('edition_language', models.CharField(blank=True, db_index=True, default=None, max_length=100, null=True)),
                ('description', models.TextField(blank=True, db_index=True)),
                ('binding', models.CharField(blank=True, db_index=True, default=None, max_length=100, null=True)),
                ('keywords', models.CharField(db_index=True, help_text='Comma-delimited set of tags', max_length=255)),
                ('master', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='translations', to='bookstore.Book')),
            ],
            options={
                'verbose_name': 'book Translation',
                'db_table': 'books_translation',
                'db_tablespace': '',
                'managed': True,
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'verbose_name_plural': 'Genres',
                'db_table': 'genres',
            },
            bases=(parler.models.TranslatableModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='GenreTranslation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('language_code', models.CharField(db_index=True, max_length=15, verbose_name='Language')),
                ('title', models.CharField(db_index=True, max_length=200)),
                ('slug', models.SlugField(help_text='Unique value for book page URL, created from name.', max_length=200, unique=True)),
                ('description', models.TextField(blank=True, db_index=True)),
                ('master', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='translations', to='bookstore.Genre')),
            ],
            options={
                'verbose_name': 'genre Translation',
                'db_table': 'genres_translation',
                'db_tablespace': '',
                'managed': True,
                'default_permissions': (),
            },
        ),
        migrations.AddField(
            model_name='book',
            name='genres',
            field=models.ManyToManyField(blank=True, default=None, related_name='books', to='bookstore.Genre'),
        ),
        migrations.AlterUniqueTogether(
            name='genretranslation',
            unique_together={('language_code', 'master')},
        ),
        migrations.AlterUniqueTogether(
            name='booktranslation',
            unique_together={('language_code', 'master')},
        ),
    ]
